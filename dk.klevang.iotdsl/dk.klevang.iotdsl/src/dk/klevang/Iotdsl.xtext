grammar dk.klevang.Iotdsl with org.eclipse.xtext.common.Terminals

generate iotdsl "http://www.klevang.dk/Iotdsl"

Program:
	(programElements += ProgramElement)*
;

ProgramElement:
	Board | Serial | WebServer
;

Board:
	'board' boardType=BoardType name=ID '{' (sensors += Sensor)* internet = Internet? '}'
;

BoardType:
 'Pycom' | 'Esp32'
;
	
Sensor:
	{Sensor} 'sensor' sensorType=SensorType name=ID sensorSettings = SensorSettings 
	'{' 
	(conditions += Condition)* 
	'endpoints' '=' endpoints += EndpointRef+
	'}'
;

EndpointRef:
	ref = [Serial] | dot = DotReference
;

DotReference:
	web = [WebServerName] '.' endpoint = [WebEndpoint]
;

SensorType:
	{Light} 'light' | {Temp} 'temp' | {Humidity} 'humidity' | {Barometer} 'barometer' | {Pier} 'pier' | {Accelerometer} 'accelerometer'
;

SensorSettings:
	'(' pins = Pins filter = Filter?')'
;

Pins:
	'pin' 'in' '=' pinIn = INT ';' 'pin' 'out' '=' pinOut = INT
;

Condition:
	'when' condition=SimpleComparison 'then' 'sampling' '=' frequency = Frequency
;


Frequency:
	{Frequency} value=INT ('Hz' | 'per' unit = Unit);

Unit:
	'day' | 'hour' | 'minute' | 'second' | 'ms'
;    

Filter:
	';' 'filtering' '=' filterType = FilterType;

FilterType:
	type='mean' value=INT | type='median' value=INT;

Internet: 
	'internet' '(' 'ssid' '=' ssid = Ssid ';' 'password' '=' internetPass = InternetPass ')';

InternetPass: 
	STRING;

Ssid: 
	STRING;

Serial:
	'serial' name=ID '(' serialPort = SerialPort (';' baud = Baud)? ';' output = Output ')'
;

WebServer:
	'webserver' (name = WebServerName) '(' host = Host ';' webPort = WebPort ';' 'endpoints' '=' webEndpoints += WebEndpoint (';' webEndpoints += WebEndpoint)* ')'
;

WebServerName returns Ref:
	{WebServerName} name = ID
;

WebEndpoint returns Ref:
	{WebEndpoint} name = ID
;

WebPort:
	'port' '=' port = INT
;

SerialPort:
	'port' '=' STRING
;

Baud:
	'baud' '=' INT
;

Output:
	OutputType '=' STRING
;

OutputType:
	'csv' | 'tsv'
;

Host:
	'host' '=' host = STRING
;

SimpleComparison:
	'this' op = (">"|"<"|"!="|"==") value=INT
;

BooleanExp returns BooleanExp:
	Or
;

Or returns BooleanExp:
	And (
		({Or.left=current} 'or')
		right=And
	)*
;

And returns BooleanExp:
	Equality (
		({And.left=current} 'and')
		right=Equality
	)*
;
Equality returns BooleanExp:
	Comparison (
		{Equlity.left=current} op = (">"|"<"|"!="|"==")
		right = Comparison
	)*
;

Comparison returns BooleanExp:
	{IntConstant} value=INT |  
	{BoolConstant} value=('true'|'false') |
	{ThisConstant} value = 'this' 
;
