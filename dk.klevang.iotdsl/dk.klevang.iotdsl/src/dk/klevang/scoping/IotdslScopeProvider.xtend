/*
 * generated by Xtext 2.20.0
 */
package dk.klevang.scoping

import java.util.List
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import dk.klevang.iotdsl.DotReference
import dk.klevang.iotdsl.Ref
import dk.klevang.iotdsl.WebServerName
import dk.klevang.iotdsl.WebEndpoint
import dk.klevang.iotdsl.WebServer
import dk.klevang.iotdsl.EndpointRef

/** 
 * This class contains custom scoping description.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class IotdslScopeProvider extends AbstractIotdslScopeProvider {
	override IScope getScope(EObject context, EReference reference) 
	{
		switch context
		{
			DotReference: context.handleDotReferenceScope(reference)
			default: super.getScope(context, reference)
		}
	}
	
	
	def IScope handleDotReferenceScope(DotReference dot, EReference ref)
	{
		var EObject rootElement = EcoreUtil2.getRootContainer(dot, true)
		var List<Ref> candidates = EcoreUtil2.getAllContentsOfType(rootElement, Ref)
		switch ref.name
		{
			case "web": {
				candidates = candidates.filter[c | c instanceof WebServerName].toList
			}
			case "endpoint": {
				candidates = candidates.filter[c | c instanceof WebEndpoint].toList
			
			}	
		}	
		
		return Scopes.scopeFor(candidates)
	}
	
}
